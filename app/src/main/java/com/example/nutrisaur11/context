# NUTRISAUR PROJECT - COMPLETE TECHNICAL CONTEXT

## PROJECT OVERVIEW
- **Project**: Nutrisaur - Nutritional screening and assessment system
- **Tech Stack**: PHP backend, JavaScript frontend, MySQL database, Android app
- **Deployment**: Railway (production), local development
- **Main Features**: WHO Growth Standards assessment, community screening, dashboard analytics

## CORE FILES AND STRUCTURE

### 1. WHO GROWTH STANDARDS IMPLEMENTATION
**File**: `public/api/who_growth_standards.php`
- **Purpose**: Core decision tree for WHO Growth Standards 2006
- **Key Methods**:
  - `getComprehensiveAssessment()` - Main assessment function
  - `calculateWeightForAge()` - Weight-for-Age calculations (0-71 months)
  - `calculateHeightForAge()` - Height-for-Age calculations (0-71 months)
  - `calculateWeightForHeight()` - Weight-for-Height calculations (0-60 months)
  - `calculateWeightForLength()` - Weight-for-Length calculations (0-24 months)
  - `calculateBMIForAge()` - BMI-for-Age calculations (24+ months)

**Decision Tree Logic**:
- Uses hardcoded lookup tables based on exact WHO table values
- Age ranges: 0-71 months for most standards, 24+ months for BMI-for-Age
- Classifications: Severely Underweight, Underweight, Normal, Overweight, Obese, etc.
- Z-score calculations with standard deviation ranges

### 2. DATABASE SCHEMA
**Main Table**: `community_users`
- **Columns**: `community_user_id`, `email`, `weight`, `height`, `sex`, `birthday`, `age`, `barangay`, `municipality`, `screening_date`, `created_at`, `updated_at`
- **Key Points**: 
  - Uses `email` as primary identifier (not `screening_id`)
  - Weight/height stored as `weight`/`height` (not `weight_kg`/`height_cm`)
  - No `nutritional_risk` column (classifications calculated dynamically)

### 3. DASHBOARD IMPLEMENTATION
**File**: `public/dash.php`
- **Purpose**: Main dashboard with WHO classification donut chart
- **Key Features**:
  - Server-side WHO classification processing
  - Dynamic chart updates based on WHO standard selection
  - Barangay/municipality filtering
  - Real-time data updates

**API Integration**:
- Uses `DatabaseAPI.php` with `get_who_classifications` endpoint
- Processes all users server-side for performance
- Returns classification counts and percentages

### 4. SCREENING PAGE
**File**: `public/screening.php`
- **Purpose**: Community user screening and data display
- **Features**:
  - WHO Growth Standards assessment for each user
  - Filtering by WHO standard, age range, classification
  - Sorting by name, email, age, screening date
  - CSV import/export functionality

### 5. DATABASE API
**File**: `public/api/DatabaseAPI.php`
- **Purpose**: Centralized database operations
- **Key Methods**:
  - `getDetailedScreeningResponses()` - Get all user data
  - `getWHOClassifications()` - Process WHO classifications server-side
  - `getCommunityData()` - Community metrics and statistics

## CRITICAL FIXES IMPLEMENTED

### 1. WHO DECISION TREE ACCURACY
**Problem**: Formula-based calculations were inaccurate
**Solution**: Replaced with hardcoded lookup tables from exact WHO table values
**Files Modified**: `who_growth_standards.php`
**Result**: 100% accurate classifications matching WHO standards

### 2. DASHBOARD PERFORMANCE
**Problem**: Individual API calls for each user (slow, 84+ calls)
**Solution**: Server-side processing with single API call
**Files Modified**: `DatabaseAPI.php`, `dash.php`
**Result**: Instant loading, same accuracy as screening page

### 3. DATA STRUCTURE CONSISTENCY
**Problem**: Mismatched column names between files
**Solution**: Standardized on `community_users` table schema
**Key Changes**:
- `screening_id` → `email`
- `weight_kg` → `weight`
- `height_cm` → `height`
- Removed `nutritional_risk` references

### 4. JAVASCRIPT ASYNC/AWAIT FIXES
**Problem**: `await` in non-async functions causing syntax errors
**Solution**: Made all calling functions async and added proper await keywords
**Files Modified**: `dash.php`
**Functions Fixed**: `updateDashboardForBarangay()`, `selectOption()`, `clearBarangaySelection()`

### 5. DROPDOWN FUNCTIONALITY
**Problem**: Inline `onchange` handlers not working
**Solution**: Replaced with `addEventListener` for proper event handling
**Files Modified**: `dash.php`
**Result**: WHO standard dropdown now works correctly

## API ENDPOINTS

### DatabaseAPI.php Endpoints
- `get_who_classifications` - Get WHO classification counts by standard
- `detailed_screening_responses` - Get all user screening data
- `community_metrics` - Get community statistics
- `geographic_distribution` - Get barangay distribution data

### Parameters
- `who_standard`: weight-for-age, height-for-age, weight-for-height, weight-for-length, bmi-for-age
- `time_frame`: 1d, 7d, 30d, 90d, 1y
- `barangay`: Specific barangay filter (empty for all)

## WHO GROWTH STANDARDS DETAILS

### Age Ranges
- **Weight-for-Age**: 0-71 months
- **Height-for-Age**: 0-71 months  
- **Weight-for-Height**: 0-60 months
- **Weight-for-Length**: 0-24 months
- **BMI-for-Age**: 24+ months (different ranges for 2-19 years vs 20+ years)

### Classifications
- **Weight-for-Age**: Severely Underweight, Underweight, Normal, Overweight
- **Height-for-Age**: Severely Stunted, Stunted, Normal, Tall
- **Weight-for-Height**: Severely Wasted, Wasted, Normal, Overweight, Obese
- **Weight-for-Length**: Severely Wasted, Wasted, Normal, Overweight, Obese
- **BMI-for-Age**: Underweight, Normal, Overweight, Obese

### Z-Score Ranges
- **Severely Underweight/Stunted/Wasted**: Z < -3
- **Underweight/Stunted/Wasted**: -3 ≤ Z < -2
- **Normal**: -2 ≤ Z ≤ +2
- **Overweight**: +2 < Z ≤ +3
- **Obese**: Z > +3

## TESTING AND VERIFICATION

### Test Data
**File**: `test_users_correct.csv`
- Contains test users with expected classifications
- Names indicate expected status (e.g., "normal8@test.com" should be "Normal")
- Covers all age ranges and classifications

### Verification Methods
1. **API Testing**: `curl` commands to test endpoints
2. **Console Logging**: JavaScript debugging for data flow
3. **Cross-Reference**: Compare dashboard vs screening page results
4. **Data Validation**: Ensure counts match expected values

## COMMON ISSUES AND SOLUTIONS

### 1. JavaScript Errors
- **"await is only valid in async functions"**: Make calling function async
- **"handleWHOStandardChange is not defined"**: Use addEventListener instead of inline handlers
- **Function not found**: Check function definition order

### 2. Data Mismatches
- **Wrong column names**: Always use `community_users` schema
- **Missing data**: Check API response structure
- **Incorrect counts**: Verify server-side processing

### 3. Performance Issues
- **Slow loading**: Use server-side processing instead of individual API calls
- **Rate limiting**: Remove excessive logging
- **Memory issues**: Process data in batches

## DEPLOYMENT NOTES

### Railway Deployment
- **Repository**: https://github.com/princepotatwo/nutrisaur.git
- **Branch**: main
- **Auto-deploy**: Yes (on push to main)
- **Environment**: Production

### File Locations
- **Web Root**: `/public/` directory
- **API Files**: `/public/api/`
- **Database Config**: `config.php` (root level)
- **WHO Standards**: `/public/api/who_growth_standards.php`

## CURRENT STATUS

### Working Features
✅ WHO Growth Standards assessment (100% accurate)
✅ Dashboard donut chart with correct counts
✅ Server-side processing (fast performance)
✅ Barangay/municipality filtering
✅ CSV import/export
✅ All WHO standards (Weight-for-Age, Height-for-Age, etc.)
✅ Dropdown functionality
✅ Data consistency across all pages

### Data Accuracy
- **Normal users**: 22 (matches screening page)
- **Total users**: 84 processed
- **Classifications**: All accurate based on WHO standards
- **Performance**: Instant loading (single API call)

## KEY LEARNINGS

1. **Always use exact WHO table values** - formulas can be inaccurate
2. **Server-side processing** is much faster than individual API calls
3. **Data structure consistency** is critical across all files
4. **JavaScript async/await** requires careful function definition order
5. **Event listeners** are more reliable than inline handlers
6. **Test data validation** is essential for accuracy verification

## MAINTENANCE NOTES

- **WHO Standards**: Update lookup tables if WHO publishes new standards
- **Database Schema**: Any changes must be reflected in all API calls
- **Performance**: Monitor API response times and optimize if needed
- **Testing**: Always verify with test data after changes
- **Deployment**: Test locally before pushing to production

This context contains all the technical knowledge, fixes, and solutions implemented in this project. Use this as a reference for future development and maintenance.
